{
  "author": "",
  "category": "General",
  "extensionNamespace": "",
  "fullName": "NumberToLetters",
  "helpPath": "",
  "iconUrl": "",
  "name": "NumberToLetters",
  "previewIconUrl": "",
  "shortDescription": "Transforme la valeur d'une variable en chaine de caract√®res de type a, b, c, ..., aa, ab, ac, ...",
  "version": "1.0.0",
  "description": "Renvoie la chaine de caract√®res propre √† la valeur, par exmple 1 pour a, 2 pour b, ..., 26 pour z, 27 pour ab, ...",
  "tags": [
    "Conversion",
    "Lettres",
    "Nombres"
  ],
  "authorIds": [
    "5y0zE28zUsQVUSSQUi8MJUwoXtJ2"
  ],
  "dependencies": [],
  "globalVariables": [],
  "sceneVariables": [],
  "eventsFunctions": [
    {
      "description": "Renvoie la chaine de caract√®res propre √† la valeur, par exmple 1 pour a, 2 pour b, ..., 26 pour z, 27 pour ab, ...",
      "fullName": "Chaine de caract√®res propre √† la valeur",
      "functionType": "StringExpression",
      "name": "NumberToLetters",
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "// Fonction qui transforme un nombre en lettres (Base 26 alphab√©tique)",
            "function numberToLetters(number) {",
            "    console.log(\"üîç Appel de la fonction avec le nombre :\", number); // Log pour v√©rifier le nombre re√ßu",
            "    if (typeof number !== \"number\" || number < 1 || !Number.isInteger(number)) {",
            "        console.error(\"‚ùå Erreur dans NumberToLetters : Le param√®tre n'est PAS un nombre valide ! Re√ßu :\", number);",
            "        return \"ERREUR\"; // Retourne \"ERREUR\" si ce n'est pas un nombre valide",
            "    }",
            "",
            "    let result = \"\";",
            "    while (number > 0) {",
            "        number--; // D√©calage pour commencer √† 'a'",
            "        result = String.fromCharCode(97 + (number % 26)) + result;",
            "        number = Math.floor(number / 26);",
            "    }",
            "",
            "    console.log(\"‚úÖ Conversion compl√®te :\", result); // Affiche la conversion",
            "    return result; // Retourne le r√©sultat sous forme de lettre(s)",
            "}",
            "",
            "// Fonction principale pour GDevelop",
            "gdjs.evtsExt__NumberToLetters__NumberToLetters = {};",
            "gdjs.evtsExt__NumberToLetters__NumberToLetters.func = function(runtimeScene, number, parentEventsFunctionContext) {",
            "    console.log(\"üîç Appel de NumberToLetters avec le nombre re√ßu :\", number); // Log pour v√©rifier ce qui est re√ßu dans GDevelop",
            "",
            "    // V√©rification si la valeur envoy√©e est un nombre valide",
            "    if (typeof number !== \"number\" || isNaN(number)) {",
            "        console.error(\"‚ùå Erreur : GDevelop n‚Äôenvoie PAS un nombre valide ! Valeur re√ßue :\", number);",
            "        return \"ERREUR\"; // Retourne \"ERREUR\" si le nombre est invalide",
            "    }",
            "",
            "    // Appeler la fonction numberToLetters et retourner le r√©sultat",
            "    return numberToLetters(number);",
            "};"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "expressionType": {
        "type": "string"
      },
      "parameters": [
        {
          "description": "Nombre √† convertir en lettres de type a, b, c, ..., aa, ab, ac, ...",
          "name": "number",
          "type": "expression"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": [],
  "eventsBasedObjects": []
}