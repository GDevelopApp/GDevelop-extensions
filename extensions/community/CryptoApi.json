{
  "author": "",
  "category": "Advanced",
  "description": "This uses the Crypto API to create a random number see help for more details. \n\nYou might ask how this differs from the built-in random functions in GDevelop like RandomInRange. In basic terms, it provides a more random number than Math.random() which is what the built-in functions use.\nThat randomness does come at a cost of performance so be aware of your usage of this. \n\n**This has nothing to do with crypto currency**",
  "extensionNamespace": "",
  "fullName": "Crypto Api",
  "helpPath": "https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues",
  "iconUrl": "",
  "name": "CryptoApi",
  "previewIconUrl": "",
  "shortDescription": "Random number generator for integers and floats using the Crypto API.",
  "version": "1.0.0",
  "tags": [
    "random",
    "crypto",
    "math"
  ],
  "authorIds": [],
  "dependencies": [],
  "eventsFunctions": [
    {
      "description": "Uses the Crypto API to create a longer random number in an integer range.",
      "fullName": "Random In Range",
      "functionType": "Expression",
      "group": "",
      "name": "RandomInRange",
      "private": false,
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const minParam = eventsFunctionContext.getArgument(\"Minimum\");\nconst maxParam = eventsFunctionContext.getArgument(\"Maximum\");\n\n/**\n * inclusive means in a range of 1-10 it includes 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \n * exclusive would be 1, 2, 3, 4, 5, 6, 7, 8, 9 \n * @min: Min value to be returned (inclusive)\n * @max: Max value to be returned (inclusive)\n */\nconst getRandomNum = (min, max) => {\n    const randomArraryBuffer = new Uint32Array(1);\n    crypto.getRandomValues(randomArraryBuffer);\n    const randomNum = randomArraryBuffer[0] / (0xffffffff + 1);\n\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(randomNum * (max - min + 1)) + min;\n}\n\neventsFunctionContext.returnValue = getRandomNum(minParam, maxParam);",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Minimum Value ",
          "longDescription": "",
          "name": "Minimum",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Maximum Value ",
          "longDescription": "",
          "name": "Maximum",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Uses the Crypto API to create a longer random number in an float range.",
      "fullName": "Random Float In Range",
      "functionType": "Expression",
      "group": "",
      "name": "RandomFloatInRange",
      "private": false,
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const minParam = eventsFunctionContext.getArgument(\"Minimum\");\nconst maxParam = eventsFunctionContext.getArgument(\"Maximum\");\n\n/**\n * @min: Min value to be returned (inclusive)\n * @max: Max value to be returned (inclusive)\n */\nconst getRandomNumFloat = (min, max) => {\n\n    const randomArraryBuffer = new Uint32Array(1);\n    crypto.getRandomValues(randomArraryBuffer);\n    const randomNum = randomArraryBuffer[0] / (0xffffffff + 1);\n\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return randomNum * (max - min + 1) + min;\n}\n\neventsFunctionContext.returnValue = getRandomNumFloat(minParam, maxParam) || 0;",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Minimum Value ",
          "longDescription": "",
          "name": "Minimum",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Maximum Value ",
          "longDescription": "",
          "name": "Maximum",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}