{
  "author": "",
  "category": "Game mechanic",
  "extensionNamespace": "",
  "fullName": "Tools for 3D",
  "helpPath": "",
  "iconUrl": "",
  "name": "ToolsFor3D",
  "previewIconUrl": "",
  "shortDescription": "Tools for 3D.",
  "version": "0.1.202310131",
  "description": [
    "Tools For 3D includes.",
    "",
    "- Return the Distance between 3D positions.",
    "",
    "- Return the Tilt / Vertical Angle between 3D positions.",
    "",
    "- Place a 3D Object around a specified point, angles and distance.",
    "   Orientation of the 3D object can also be set.",
    "",
    "- Check if the 3D position is inside the 3D Object.",
    "   This check is rudimentary for mostly upright objects.",
    "   The check works properly on Objects rotated only on Z-axis.",
    "   To get the the check against MODEL correct, the Origin needs to be set on bottom middle.",
    "",
    "- Check the collision between 3D Objects.",
    "   Perfect for checking collision with 3dBoxes used for floors, walls, bridges, and upright obstacles like characters, furniture, pillars, etc.",
    "   This check is rudimentary for mostly upright objects.",
    "   The check works properly on Objects rotated only on Z-axis.",
    "   To get the the MODEL collision correct, the Origin needs to be set on bottom middle.",
    "   Or you use a hidden 3D Box as a collision mask for the model, just like done sometimes with 2d sprites.",
    ""
  ],
  "tags": [],
  "authorIds": [
    "PEzPAaWHgYgk5UwIPppsL6f2ugp2"
  ],
  "dependencies": [],
  "eventsFunctions": [
    {
      "description": "Returns the tilt / vertical angle between 3D positions.",
      "fullName": "Tilt Between 3D Positions",
      "functionType": "Expression",
      "name": "TiltBetween3DPositions",
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "SetReturnNumber"
              },
              "parameters": [
                "ToDeg(atan((PositionZ1-PositionZ2)/ sqrt((pow(PositionX1-PositionX2,2) + pow(PositionY1-PositionY2,2)))))"
              ]
            }
          ]
        }
      ],
      "expressionType": {
        "type": "expression"
      },
      "parameters": [
        {
          "description": "Position of 1st X",
          "name": "PositionX1",
          "type": "expression"
        },
        {
          "description": "Position of 1st Y",
          "name": "PositionY1",
          "type": "expression"
        },
        {
          "description": "Position of 1st Z",
          "name": "PositionZ1",
          "type": "expression"
        },
        {
          "description": "Psotion of 2nd X",
          "name": "PositionX2",
          "type": "expression"
        },
        {
          "description": "Position of 2nd Y",
          "name": "PositionY2",
          "type": "expression"
        },
        {
          "description": "Position of 2nd Z",
          "name": "PositionZ2",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Returns the distance between 3D positions.",
      "fullName": "Distance Between 3D Positions",
      "functionType": "Expression",
      "name": "DistanceBetween3DPositions",
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "SetReturnNumber"
              },
              "parameters": [
                "sqrt((pow(sqrt((pow(PositionX1-PositionX2,2) + pow(PositionY1-PositionY2,2))),2) + pow(PositionZ1-PositionZ2,2)))"
              ]
            }
          ]
        }
      ],
      "expressionType": {
        "type": "expression"
      },
      "parameters": [
        {
          "description": "Position of 1st X",
          "name": "PositionX1",
          "type": "expression"
        },
        {
          "description": "Position of 1st Y",
          "name": "PositionY1",
          "type": "expression"
        },
        {
          "description": "Position of 1st Z",
          "name": "PositionZ1",
          "type": "expression"
        },
        {
          "description": "Psotion of 2nd X",
          "name": "PositionX2",
          "type": "expression"
        },
        {
          "description": "Position of 2nd Y",
          "name": "PositionY2",
          "type": "expression"
        },
        {
          "description": "Position of 2nd Z",
          "name": "PositionZ2",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Tests if the point provided is inside a 3D Object.",
      "fullName": "Point Inside a 3D Object",
      "functionType": "Condition",
      "name": "PointInsideA3DObject",
      "sentence": "Point X: _PARAM1_, Y: _PARAM2_, Z: _PARAM3_ is inside 3D Object: _PARAM4_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "CollisionPoint"
              },
              "parameters": [
                "Object",
                "XCoordinate",
                "YCoordinate"
              ]
            }
          ],
          "actions": [],
          "events": [
            {
              "type": "BuiltinCommonInstructions::ForEach",
              "object": "Object",
              "conditions": [
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::CompareNumbers"
                  },
                  "parameters": [
                    "ZCoordinate",
                    ">=",
                    "Object.Object3D::Z()"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::CompareNumbers"
                  },
                  "parameters": [
                    "ZCoordinate",
                    "<=",
                    "Object.Object3D::Z() + Object.Object3D::Depth()"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "X-Coordinate to test",
          "name": "XCoordinate",
          "type": "expression"
        },
        {
          "description": "Y-Coordinate to test",
          "name": "YCoordinate",
          "type": "expression"
        },
        {
          "description": "Z-Coordinate to test",
          "name": "ZCoordinate",
          "type": "expression"
        },
        {
          "description": "3d box to test against",
          "name": "Object",
          "type": "objectList"
        },
        {
          "description": "Object 3d Capability",
          "name": "Object3D",
          "supplementaryInformation": "Scene3D::Base3DBehavior",
          "type": "behavior"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Checks the collision of 3d objects.",
      "fullName": "Collision Between 3D Objects",
      "functionType": "Condition",
      "name": "CollisionBetween3DObjects",
      "sentence": "3D Object: _PARAM1_ is colliding with 3D Object: _PARAM3_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "CollisionNP"
              },
              "parameters": [
                "FirstObject",
                "SecondObject",
                "",
                "",
                ""
              ]
            },
            {
              "type": {
                "value": "BuiltinCommonInstructions::Or"
              },
              "parameters": [],
              "subInstructions": [
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::And"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "FirstObject.Parameter2::Z()",
                        ">",
                        "SecondObject.Parameter4::Z()"
                      ]
                    },
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "FirstObject.Parameter2::Z()",
                        "<",
                        "SecondObject.Parameter4::Z() + SecondObject.Parameter4::Depth()"
                      ]
                    }
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::And"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "FirstObject.Parameter2::Z() + FirstObject.Parameter2::Depth()",
                        ">",
                        "SecondObject.Parameter4::Z()"
                      ]
                    },
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "FirstObject.Parameter2::Z() + FirstObject.Parameter2::Depth()",
                        "<",
                        "SecondObject.Parameter4::Z() + SecondObject.Parameter4::Depth()"
                      ]
                    }
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::And"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "SecondObject.Parameter4::Z()",
                        ">",
                        "FirstObject.Parameter2::Z()"
                      ]
                    },
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "SecondObject.Parameter4::Z()",
                        "<",
                        "FirstObject.Parameter2::Z() + FirstObject.Parameter2::Depth()"
                      ]
                    }
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::And"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "SecondObject.Parameter4::Z() + SecondObject.Parameter4::Depth()",
                        ">",
                        "FirstObject.Parameter2::Z()"
                      ]
                    },
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "SecondObject.Parameter4::Z() + SecondObject.Parameter4::Depth()",
                        "<",
                        "FirstObject.Parameter2::Z() + FirstObject.Parameter2::Depth()"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetReturnBoolean"
              },
              "parameters": [
                "True"
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Object to test with",
          "name": "FirstObject",
          "type": "objectList"
        },
        {
          "description": "Behaviour of the object to test with",
          "name": "Parameter2",
          "supplementaryInformation": "Scene3D::Base3DBehavior",
          "type": "behavior"
        },
        {
          "description": "Object to test against",
          "name": "SecondObject",
          "type": "objectList"
        },
        {
          "description": "Behaviour of the object to test against",
          "name": "Parameter4",
          "supplementaryInformation": "Scene3D::Base3DBehavior",
          "type": "behavior"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Puts a 3D Object around a point.",
      "fullName": "Put 3D Object around Point",
      "functionType": "Action",
      "name": "Put3dObjectAroundPoint",
      "sentence": "Put 3D Object: _PARAM1_ around point X: _PARAM3_, Y: _PARAM4_ and Z: _PARAM5_ with angle of: _PARAM6_, elevation angle of: _PARAM7_, distance of: _PARAM8_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "SetCenter"
              },
              "parameters": [
                "ObjectToPlace",
                "=",
                "PointForX+ ((cos(ToRad(Angle)) * cos(ToRad(AngleElevation))) ) * Distance",
                "=",
                "PointForY+ ((sin(ToRad(Angle)) * cos(ToRad(AngleElevation)))) * Distance"
              ]
            },
            {
              "type": {
                "value": "Scene3D::Base3DBehavior::SetCenterZ"
              },
              "parameters": [
                "ObjectToPlace",
                "_3DObject",
                "=",
                "PointForZ-sin(ToRad(AngleElevation)) * Distance"
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Object to put around a point",
          "name": "ObjectToPlace",
          "type": "objectList"
        },
        {
          "description": "Behaviour for the Object to place",
          "name": "_3DObject",
          "supplementaryInformation": "Scene3D::Base3DBehavior",
          "type": "behavior"
        },
        {
          "description": "Point X to put object around to",
          "name": "PointForX",
          "type": "expression"
        },
        {
          "description": "Point Y to put object around to",
          "name": "PointForY",
          "type": "expression"
        },
        {
          "description": "Point Z to put object around to",
          "name": "PointForZ",
          "type": "expression"
        },
        {
          "description": "Angle of object around a point (X/Y plane)",
          "name": "Angle",
          "type": "expression"
        },
        {
          "description": "Angle of elevation around a point",
          "name": "AngleElevation",
          "type": "expression"
        },
        {
          "description": "Distance from point to put object at",
          "name": "Distance",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Puts a 3D Object around a point with orientation.",
      "fullName": "Put 3D Object around Point with orientation",
      "functionType": "Action",
      "name": "Put3dObjectAroundPointWithOrientation",
      "sentence": "Put 3D Object: _PARAM1_ around point X: _PARAM3_, Y: _PARAM4_ and Z: _PARAM5_ with angle of: _PARAM6_, elevation angle of: _PARAM7_, distance of: _PARAM8_,  Orbiting object angle: _PARAM9_ and Orbiting object rotation Y: _PARAM10_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "SetCenter"
              },
              "parameters": [
                "ObjectToPlace",
                "=",
                "PointForX+ ((cos(ToRad(Angle)) * cos(ToRad(AngleElevation))) ) * Distance",
                "=",
                "PointForY+ ((sin(ToRad(Angle)) * cos(ToRad(AngleElevation)))) * Distance"
              ]
            },
            {
              "type": {
                "value": "Scene3D::Base3DBehavior::SetCenterZ"
              },
              "parameters": [
                "ObjectToPlace",
                "_3DObject",
                "=",
                "PointForZ-sin(ToRad(AngleElevation)) * Distance"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "SetAngle"
              },
              "parameters": [
                "ObjectToPlace",
                "=",
                "OrbitingObjectAngle"
              ]
            },
            {
              "type": {
                "value": "Scene3D::Base3DBehavior::SetRotationY"
              },
              "parameters": [
                "ObjectToPlace",
                "_3DObject",
                "=",
                "OrbitingObjectRotationY"
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Object to put around a point",
          "name": "ObjectToPlace",
          "type": "objectList"
        },
        {
          "description": "Behaviour for the Object to place",
          "name": "_3DObject",
          "supplementaryInformation": "Scene3D::Base3DBehavior",
          "type": "behavior"
        },
        {
          "description": "Point X to put object around to",
          "name": "PointForX",
          "type": "expression"
        },
        {
          "description": "Point Y to put object around to",
          "name": "PointForY",
          "type": "expression"
        },
        {
          "description": "Point Z to put object around to",
          "name": "PointForZ",
          "type": "expression"
        },
        {
          "description": "Angle of object around a point (X/Y plane)",
          "name": "Angle",
          "type": "expression"
        },
        {
          "description": "Angle of elevation around a point",
          "name": "AngleElevation",
          "type": "expression"
        },
        {
          "description": "Distance from point to put object at",
          "name": "Distance",
          "type": "expression"
        },
        {
          "description": "Orbiting object angle",
          "name": "OrbitingObjectAngle",
          "type": "expression"
        },
        {
          "description": "Orbiting Object Rotation Y",
          "name": "OrbitingObjectRotationY",
          "type": "expression"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": [],
  "eventsBasedObjects": []
}